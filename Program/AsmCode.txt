call main:
hlt

factorial: 
    pop [0]

    @ if condition:
    push [0]
    push 0
    je EQ_0:
    push 0
    jmp AFTER_EQ_0:
    EQ_0:
    push 1
    AFTER_EQ_0:

    push 0
    je END_IF_1:
    @ if code block:
        push [0]
        push [0]
        sub
        push 1
        add
        ret
    END_IF_1:

    @ pushing func local vars:
    push [0]
    @ pushing func args:
    push -1
    push [0]
    add
    call factorial:
    @ saving func return
    pop rax
    pop [0]
    push rax
    push [0]
    mul
    ret

main: 
    in
    pop [1]
    @ pushing func local vars:
    push [1]
    @ pushing func args:
    push [1]
    call factorial:
    @ saving func return
    pop rax
    pop [1]
    push rax
    pop [2]
    push 102
    outc
    pop
    push 97
    outc
    pop
    push 99
    outc
    pop
    push 116
    outc
    pop
    push 111
    outc
    pop
    push 114
    outc
    pop
    push 105
    outc
    pop
    push 97
    outc
    pop
    push 108
    outc
    pop
    push 58
    outc
    pop
    push 32
    outc
    pop
    push 10
    outc
    pop
    push [2]
    out
    pop
    push 53
    outc
    pop
    push 56
    outc
    pop
    push 10
    outc
    pop
    push 0
    ret
    ret
